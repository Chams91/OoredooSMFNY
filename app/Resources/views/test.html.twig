{% extends 'base.html.twig' %}
    {% block title %}View your Document{% endblock %}
    {% block stylesheets %}
        <link rel="stylesheet" href="{{ asset('css/bootstrap.min.css') }}">
        <link rel="stylesheet" href="{{ asset('css/responsive.css') }}">

    <style type="text/css">

        #upload-button {
            width: 150px;
            display: block;
            margin: 20px auto;
        }

        #file-to-upload {
            display: none;
        }

        #pdf-main-container {
            width: 400px;
            margin: 20px auto;
        }

        #pdf-loader {
            display: none;
            text-align: center;
            color: #999999;
            font-size: 13px;
            line-height: 100px;
            height: 100px;
        }

        #pdf-contents {
            display: none;
        }

        #pdf-meta {
            overflow: hidden;
            margin: 0 0 20px 0;
        }

        #pdf-buttons {
            float: left;
        }

        #page-count-container {
            float: right;
        }

        #pdf-current-page {
            display: inline;
        }

        #pdf-total-pages {
            display: inline;
        }

        #pdf-canvas {
            border: 1px solid rgba(0,0,0,0.2);
            box-sizing: border-box;
        }

        #page-loader {
            height: 100px;
            line-height: 100px;
            text-align: center;
            display: none;
            color: #999999;
            font-size: 13px;
        }

    </style>
    {% endblock %}
{% block content %}
<h2>XXXXX</h2>
<button class="btn btn-success" id="upload-button">Select PDF</button>
<input type="file" id="file-to-upload" accept="application/pdf" />


<table class="table table-hover table-dark">
    <thead>
    <tr>
        <th scope="col">File Name</th>
        <th scope="col">Consultation Time</th>
        <th scope="col">Client Phone No'</th>
    </tr>
    </thead>

    <tbody>
    <tr>
        <td id="pdf-title"></td>
        <td id="pdf-time"></td>
        <td id="pdf-pagina-contenido"></td>
    </tr>
    </tbody>
</table>

<div id="pdf-main-container">
    <div id="pdf-loader">Loading document ...</div>
    <div id="pdf-contents">
        <div id="pdf-meta">
            <div id="pdf-buttons">
                <button class="btn btn-warning" id="pdf-prev">Previous</button>
                <button class="btn btn-warning" id="pdf-next">Next</button>
            </div>
            <div id="page-count-container">Page <div id="pdf-current-page"></div> of <div id="pdf-total-pages"></div></div>
        </div>
        <canvas id="pdf-canvas" width="400"></canvas>
        <div id="page-loader">Loading page ...</div>
    </div>
</div>

{% endblock %}
    {% block javascripts %}
    <script src="{{ asset('js/jquery-3.2.1.min.js') }}"></script>
    <script src="{{ asset('js/pdf.js') }}"></script>
    <script src="{{ asset('js/pdf.worker.js') }}"></script>
    <script src="{{ asset('js/bootstrap.min.js') }}"></script>
    <script src="{{ asset("js/moment.js") }}"></script>
    <script>

    var __PDF_DOC,
        __CURRENT_PAGE,
        __TOTAL_PAGES,
        __PAGE_RENDERING_IN_PROGRESS = 0,
        __CANVAS = $('#pdf-canvas').get(0),
        __TITLE,
        __TIME,

        __CANVAS_CTX = __CANVAS.getContext('2d');


    function showPDF(pdf_url) {
        $("#pdf-loader").show();

        PDFJS.workerSrc = "{{ asset('js/pdf.worker.js') }}";
        PDFJS.getDocument({url:pdf_url}).then(function (PDFDocumentInstance) {

            // Use the PDFDocumentInstance To extract the text later

            var pdfDocument = PDFDocumentInstance;
            // Create an array that will contain our promises
            var pagesPromises = [];
            var pageNumber= 1;

            // Store the promise of getPageText that returns the text of a page
            pagesPromises.push(getPageText(pageNumber, pdfDocument));


            // Execute all the promises
            Promise.all(pagesPromises).then(function (pagesText) {

                $("#pdf-pagina-contenido").append(pagesText);

            });

        }, function (reason) {
            // PDF loading error
            console.error(reason);
        });

        PDFJS.getDocument({ url: pdf_url }).then(function(pdf_doc) {
            __PDF_DOC = pdf_doc;
            __TOTAL_PAGES = __PDF_DOC.numPages;
            __TITLE=$("#file-to-upload").get(0).files[0].name;
            __TIME= moment(new Date().getTime()).format('DD-MM-YYYY HH:mm:ss');
            // Hide the pdf loader and show pdf container in HTML
            $("#pdf-loader").hide();
            $("#pdf-contents").show();
            $("#pdf-total-pages").text(__TOTAL_PAGES);
            $("#pdf-title").text(__TITLE);
            $("#pdf-time").text(__TIME);

            // Show the first page
            showPage(1);
        }).catch(function(error) {
            // If error re-show the upload button
            $("#pdf-loader").hide();
            $("#upload-button").show();

            alert(error.message);
        });;
    }

    /**
     * Retrieves the text of a specif page within a PDF Document obtained through pdf.js
     *
     * @param {Integer} pageNum Specifies the number of the page
     * @param {PDFDocument} PDFDocumentInstance The PDF document obtained
     **/
    function getPageText(pageNum, PDFDocumentInstance) {
        // Return a Promise that is solved once the text of the page is retrieven
        return new Promise(function (resolve, reject) {
            PDFDocumentInstance.getPage(pageNum).then(function (pdfPage) {
                // The main trick to obtain the text of the PDF page, use the getTextContent method
                pdfPage.getTextContent().then(function (textContent) {
                    var textItems = textContent.items;
                    var finalString = "";

                    // Concatenate the string of the item to the final string
                    for (var i = 9; i < 10; i++) {
                        var item = textItems[i];

                        finalString += item.str + " ";
                    }

                    // Solve promise with the text retrieven from the page
                    resolve(finalString);
                });
            });
        });
    }

    function showPage(page_no) {
        __PAGE_RENDERING_IN_PROGRESS = 1;
        __CURRENT_PAGE = page_no;

        // Disable Prev & Next buttons while page is being loaded
        $("#pdf-next, #pdf-prev").attr('disabled', 'disabled');

        // While page is being rendered hide the canvas and show a loading message
        $("#pdf-canvas").hide();
        $("#page-loader").show();

        // Update current page in HTML
        $("#pdf-current-page").text(page_no);

        // Fetch the page
        __PDF_DOC.getPage(page_no).then(function(page) {
            // As the canvas is of a fixed width we need to set the scale of the viewport accordingly
            var scale_required = __CANVAS.width / page.getViewport(1).width;

            // Get viewport of the page at required scale
            var viewport = page.getViewport(scale_required);

            // Set canvas height
            __CANVAS.height = viewport.height;

            var renderContext = {
                canvasContext: __CANVAS_CTX,
                viewport: viewport
            };

            // Render the page contents in the canvas
            page.render(renderContext).then(function() {
                __PAGE_RENDERING_IN_PROGRESS = 0;

                // Re-enable Prev & Next buttons
                $("#pdf-next, #pdf-prev").removeAttr('disabled');

                // Show the canvas and hide the page loader
                $("#pdf-canvas").show();
                $("#page-loader").hide();
            });
        });
    }

    // Upon click this should should trigger click on the #file-to-upload file input element
    // This is better than showing the not-good-looking file input element
    $("#upload-button").on('click', function() {
        $("#file-to-upload").trigger('click');
    });

    // When user chooses a PDF file
    $("#file-to-upload").on('change', function() {
        // Validate whether PDF
        if(['application/pdf'].indexOf($("#file-to-upload").get(0).files[0].type) == -1) {
            alert('Error : Not a PDF');
            return;
        }

        $("#upload-button").hide();

        // Send the object url of the pdf
        showPDF(URL.createObjectURL($("#file-to-upload").get(0).files[0]));
    });

    // Previous page of the PDF
    $("#pdf-prev").on('click', function() {
        if(__CURRENT_PAGE != 1)
            showPage(--__CURRENT_PAGE);
    });

    // Next page of the PDF
    $("#pdf-next").on('click', function() {
        if(__CURRENT_PAGE != __TOTAL_PAGES)
            showPage(++__CURRENT_PAGE);
    });



    $( document ).ready(function() {

        $( "#pdf-pagina-contenido" ).bind("DOMSubtreeModified",function() {
            var title = $( "#pdf-title" ).text();
            var time = $("#pdf-time").text();
            var phoneNo = $("#pdf-pagina-contenido").text();
            storeData(title,time,phoneNo);
        });

    });


    function storeData(title,time,phoneNo)
    {
        $.ajax({
            type: "POST",
            url: '{{ path('store') }}',
            data: { title: title ,
                time : time,
                phoneNo: phoneNo
            } ,

            success: function (data) {
                // this is executed when ajax call finished well
                alert('Content of the executed page: ' + title +' - Time: '+time);
            },
            error:function(error){
                alert('Error: data couldnt be created');
                console.log(error);
            }
        });
    }



</script>
        {% endblock %}